FROM node:16.14.2-alpine AS build-stage
WORKDIR /usr/monorepo
# Copy all necessary files/folders
COPY package.json .
COPY yarn.lock .
COPY .yarnrc.yml .
COPY .yarn ./.yarn
COPY .nvmrc .
COPY tsconfig.json .
COPY .pnp.cjs .
COPY .pnp.loader.mjs .
COPY app/client ./app/client
# Set up build environment variables
ARG GRAPHQL_URL=https://prytaneum.io/graphql
ENV NEXT_PUBLIC_GRAPHQL_URL ${GRAPHQL_URL}
ARG GOOGLE_ANALYTICS_ID=secret
ENV NEXT_PUBLIC_GOOGLE_ANALYTICS ${GOOGLE_ANALYTICS_ID}
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
RUN yarn install
RUN yarn workspace @app/client build

FROM node:16.14.2-alpine AS production-stage
WORKDIR /usr/monorepo
# Set appropriate env variables
ENV NODE_ENV production
ENV HOST 0.0.0.0
ENV PORT 3000
ARG DEPLOYMENT_ENV=production
ENV DEPLOYMENT_ENV ${DEPLOYMENT_ENV}
# Monorepo files
COPY --from=build-stage /usr/monorepo/package.json ./
COPY --from=build-stage /usr/monorepo/.yarnrc.yml ./
COPY --from=build-stage /usr/monorepo/yarn.lock ./
COPY --from=build-stage /usr/monorepo/.pnp.cjs ./
COPY --from=build-stage /usr/monorepo/.nvmrc ./
COPY --from=build-stage /usr/monorepo/.yarn/releases ./.yarn/releases
COPY --from=build-stage /usr/monorepo/.yarn/plugins ./.yarn/plugins
# Client specific files
COPY --from=build-stage /usr/monorepo/app/client/.next ./app/client/.next
COPY --from=build-stage /usr/monorepo/app/client/public ./app/client/public
COPY --from=build-stage /usr/monorepo/app/client/next.config.js ./app/client
COPY --from=build-stage /usr/monorepo/app/client/package.json ./app/client
# Install only packages necessary for the client to run
RUN yarn workspaces focus --production @app/client
EXPOSE 3000
CMD ["yarn", "workspace", "@app/client", "start"]