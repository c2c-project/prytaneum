"use strict";(self.webpackChunk_app_docs=self.webpackChunk_app_docs||[]).push([[358],{8840:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(9703);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(n),m=i,k=c["".concat(o,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(k,l(l({ref:t},u),{},{components:n})):r.createElement(k,l({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:i,l[1]=p;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7082:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return d}});var r=n(6738),i=n(8832),a=(n(9703),n(8840)),l=["components"],p={},o="Scripts",s={unversionedId:"developing/scripts",id:"developing/scripts",title:"Scripts",description:"Documentation for all scripts in each respective package.json file.",source:"@site/docs/developing/scripts.md",sourceDirName:"developing",slug:"/developing/scripts",permalink:"/prytaneum/docs/developing/scripts",draft:!1,editUrl:"https://github.com/c2c-project/prytaneum/tree/dev/app/docs/docs/developing/scripts.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How do I ...?",permalink:"/prytaneum/docs/developing/how-do-i"},next:{title:"Server",permalink:"/prytaneum/docs/developing/server"}},u={},d=[{value:"Project Root",id:"project-root",level:2},{value:"Client",id:"client",level:2},{value:"E2E",id:"e2e",level:2},{value:"Server",id:"server",level:2}],c={toc:d};function m(e){var t=e.components,n=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"scripts"},"Scripts"),(0,a.kt)("p",null,"Documentation for all scripts in each respective ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," file."),(0,a.kt)("h2",{id:"project-root"},"Project Root"),(0,a.kt)("p",null,"All scripts at the root directory are prefixed with ",(0,a.kt)("inlineCode",{parentName:"p"},"g:")," for global."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"g:commit"),": Add a commit using the ",(0,a.kt)("inlineCode",{parentName:"li"},"commitlint")," prompt."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"g:start-db"),": Start the database using ",(0,a.kt)("inlineCode",{parentName:"li"},"docker")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"docker-compose"),". See ",(0,a.kt)("inlineCode",{parentName:"li"},"db/start-db.sh"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"g:start-test-db"),": Starts a test specific database using ",(0,a.kt)("inlineCode",{parentName:"li"},"docker")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"docker-compose"),". See ",(0,a.kt)("inlineCode",{parentName:"li"},"db/start-test-db.sh"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"g:stop-db"),": Stops the currently running database. See ",(0,a.kt)("inlineCode",{parentName:"li"},"db/stop-db.sh"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"g:husky"),": Installs husky"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"g:dev"),": Starts the project in development mode."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"g:dev-test"),": Starts a minimal development instance intended for testing in CI/CD.")),(0,a.kt)("h2",{id:"client"},"Client"),(0,a.kt)("p",null,"Prefix scripts with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn workspace @app/client\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"start"),": Start the client with NODE_ENV=production"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"dev"),": Start the client with NODE_ENV=development"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"info"),": See ",(0,a.kt)("a",{parentName:"li",href:"https://nextjs.org/docs/api-reference/cli#info"},(0,a.kt)("inlineCode",{parentName:"a"},"next info"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"build"),": Build the client."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"relay"),": Start the relay compiler in watch mode."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"typecheck"),": Check that all types are correct."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"lint"),": Lint the client.")),(0,a.kt)("h2",{id:"e2e"},"E2E"),(0,a.kt)("p",null,"Prefix scripts with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn workspace @app/e2e\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pretest"),": Starts up the project and seeds the DB in preperation to run the playwright tests."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test"),": Runs playwright tests."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test:ci"),": Runs playwright tests with the environment variable set to ",(0,a.kt)("inlineCode",{parentName:"li"},"CI=1")," so the configuration can be set to run on the CI/CD pipeline."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"debug"),": Runs playwright tests in headed mode, allowing for playwright to open browsers locally to monitor tests as they execute."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"allure:generate-report"),": Takes the test results under the folder ",(0,a.kt)("inlineCode",{parentName:"li"},"app/e2e/allure-results")," and generates a report at ",(0,a.kt)("inlineCode",{parentName:"li"},"app/e2e/allure-report"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"allure:open-report"),": Generates and opens an allure report in the browser.")),(0,a.kt)("h2",{id:"server"},"Server"),(0,a.kt)("p",null,"Prefix scripts with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn workspace @app/server\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"start"),": Start the client with NODE_ENV=production"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"dev"),": Start the client with NODE_ENV=development"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"build"),": Build the server."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"add-feat"),": Helper script that uses the ",(0,a.kt)("inlineCode",{parentName:"li"},"templates/")," folder to generate boilerplate for a new feature folder.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn workspace @app/server add-feat somNewFeature # will add feature/some-new-feature with the appropriate files\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"typecheck"),": Check that all types are correct."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"prod"),": Only used in prod for running the application"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"generate"),": Generate prisma types. Only necessary to run when the database has been or is being modified and when running the project for the first time."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"lint"),": Lint the server."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"prisma-db-push"),": Pushes the current prisma schema to the DB."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"prisma-db-seed"),": Seeds the DB using the file ",(0,a.kt)("inlineCode",{parentName:"li"},"app/server/prisma/seed.ts"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test:prisma-db-push"),": Pushes the current schema with the ",(0,a.kt)("inlineCode",{parentName:"li"},"NODE_ENV=test"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test:unit"),": Runs unit tests using jest with the ",(0,a.kt)("inlineCode",{parentName:"li"},"NODE_ENV=test"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test:integration"),": Runs integration tests using jest with the ",(0,a.kt)("inlineCode",{parentName:"li"},"NODE_ENV=test")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test:ci"),": Runs all server tests after ensuring the test DB is running. Used for CI/CD pipeline.")))}m.isMDXComponent=!0}}]);