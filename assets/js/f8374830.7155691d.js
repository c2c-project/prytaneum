"use strict";(self.webpackChunk_app_docs=self.webpackChunk_app_docs||[]).push([[358],{8840:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(9703);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,k=u["".concat(p,".").concat(m)]||u[m]||s[m]||i;return n?r.createElement(k,l(l({ref:t},d),{},{components:n})):r.createElement(k,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5852:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return s}});var r=n(6738),a=n(8832),i=(n(9703),n(8840)),l=["components"],o={},p="Scripts",c={unversionedId:"developing/scripts",id:"developing/scripts",title:"Scripts",description:"Documentation for all scripts in each respective package.json file.",source:"@site/docs/developing/scripts.md",sourceDirName:"developing",slug:"/developing/scripts",permalink:"/docs/developing/scripts",draft:!1,editUrl:"https://github.com/c2c-project/prytaneum/tree/dev/app/docs/docs/developing/scripts.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How do I ...?",permalink:"/docs/developing/how-do-i"},next:{title:"Server",permalink:"/docs/developing/server"}},d={},s=[{value:"Project Root",id:"project-root",level:2},{value:"Client",id:"client",level:2},{value:"Server",id:"server",level:2}],u={toc:s};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"scripts"},"Scripts"),(0,i.kt)("p",null,"Documentation for all scripts in each respective ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," file."),(0,i.kt)("h2",{id:"project-root"},"Project Root"),(0,i.kt)("p",null,"All scripts at the root directory are prefixed with ",(0,i.kt)("inlineCode",{parentName:"p"},"g:")," for global."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"g:commit"),": Add a commit using the ",(0,i.kt)("inlineCode",{parentName:"li"},"commitlint")," prompt."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"g:codegen"),": Generate files using graphql codegen."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"g:dev-server"),": Start the server with NODE_ENV=development."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"g:start-server"),": Start the server with NODE_ENV=production."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"g:dev-client"),": Start the client with NODE_ENV=development."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"g:start-client"),": Start the client with NODE_ENV=production."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"g:client-relay"),": Generate ",(0,i.kt)("inlineCode",{parentName:"li"},"relay")," type defs on the client."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"g:start-db"),": Start the database using ",(0,i.kt)("inlineCode",{parentName:"li"},"docker")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"docker-compose"),". See ",(0,i.kt)("inlineCode",{parentName:"li"},"db/start-db.sh"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"g:start-proxy"),": Start the proxy that sits in front of the client and server."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"g:dev-project"),": Start the database, server, client, and proxy with NODE_ENV=development."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"g:start-project"),": Start the database, server, client, and proxy with NODE_ENV=production.")),(0,i.kt)("h2",{id:"client"},"Client"),(0,i.kt)("p",null,"Prefix scripts with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn workspace @app/client\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"start"),": Start the client with NODE_ENV=production"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dev"),": Start the client with NODE_ENV=development"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"info"),": See ",(0,i.kt)("a",{parentName:"li",href:"https://nextjs.org/docs/api-reference/cli#info"},(0,i.kt)("inlineCode",{parentName:"a"},"next info"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"build"),": Build the client."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"relay"),": Start the relay compiler in watch mode."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"typecheck"),": Check that all types are correct."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lint"),": Lint the client."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test:e2e"),": Perform an e2e test."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test:e2e:ci"),": For CI use only."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test:e2e:headed"),": Runs test in headed mode, useful for debugging tests. ",(0,i.kt)("a",{parentName:"li",href:"https://playwright.dev/docs/debug#run-in-headed-mode"},"docs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allure:generate-report"),": Generate coverage stats."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allure:report"),": Open the web view of the report.")),(0,i.kt)("h2",{id:"server"},"Server"),(0,i.kt)("p",null,"Prefix scripts with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn workspace @app/server\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"start"),": Start the client with NODE_ENV=production"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dev"),": Start the client with NODE_ENV=development"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"build"),": Build the server."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"add-feat"),": Helper script that uses the ",(0,i.kt)("inlineCode",{parentName:"li"},"templates/")," folder to generate boilerplate for a new feature folder.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn workspace @app/server add-feat somNewFeature # will add feature/some-new-feature with the appropriate files\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"typecheck"),": Check that all types are correct."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"prod"),": Only used in prod for running the application"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"generate"),": Generate prisma types. Only necessary to run when the database has been or is being modified and when running the project for the first time."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lint"),": Lint the server.")))}m.isMDXComponent=!0}}]);