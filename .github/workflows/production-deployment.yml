name: Build and Deploy Production Version to GKE

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
  GKE_CLUSTER: prytaneum-dev-cluster    
  GKE_ZONE: us-central1-a   
  CLIENT_DEPLOYMENT: prytaneum-client
  SERVER_DEPLOYMENT: prytaneum-server 
  CLIENT_IMAGE: prytaneum-client
  SERVER_IMAGE: prytaneum-server
  NAMESPACE: production

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT_ID }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker
    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Build the Client
    - name: Build Client
      run: |-
        docker build \
          -f Dockerfile.client \
          --tag "gcr.io/$PROJECT_ID/$CLIENT_IMAGE:production" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Build the Server
    - name: Build Server
      run: |-
        docker build \
          -f Dockerfile.server \
          --tag "gcr.io/$PROJECT_ID/$SERVER_IMAGE:production" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Client image to Google Container Registry
    - name: Publish Client
      run: |-
        docker push "gcr.io/$PROJECT_ID/$CLIENT_IMAGE:production"
    # Push the Server image to Google Container Registry
    - name: Publish Server
      run: |-
        docker push "gcr.io/$PROJECT_ID/$SERVER_IMAGE:production"

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Kustomize & Deploy Client
      run: |-
        cd ./k8s/client
        kustomize edit set image gcr.io/PROJECT_ID/CLIENT_IMAGE:TAG=gcr.io/$PROJECT_ID/$CLIENT_IMAGE:production
        kustomize build . | kubectl apply -f -

    - name: Kustomize & Deploy Server
      run: |-
        cd ./k8s/server
        kustomize edit set image gcr.io/PROJECT_ID/SERVER_IMAGE:TAG=gcr.io/$PROJECT_ID/$SERVER_IMAGE:production
        kustomize build . | kubectl apply -f -
        
    - name: Kustomize & Deploy Ingress
      run: |-
        kustomize build ./k8s | kubectl apply -f -

    - name: Deploy Certificate
      run: |-
        cd ./k8s/cert
        kubectl apply -f prytaneum-managed-certificate.yml

    - name: Set kubectl context
      run: |-
        kubectl config set-context --current --namespace=$NAMESPACE

    - name: Deployment Rollout Check
      run: |-
        kubectl rollout status deployment/prytaneum-client
        kubectl rollout status deployment/prytaneum-server
        kubectl get services -o wide
