name: Development Workflow

on:
    pull_request_target:
        branches: [dev]
        types: [opened, edited, synchronize]

env:
    PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
    GKE_CLUSTER: prytaneum-dev-cluster
    GKE_ZONE: us-central1-a
    CLIENT_DEPLOYMENT: prytaneum-client
    SERVER_DEPLOYMENT: prytaneum-server
    CLIENT_IMAGE: prytaneum-client
    SERVER_IMAGE: prytaneum-server
    NAMESPACE: development
    GRAPHQL_URL: https://dev.prytaneum.io/graphql

jobs:
    linting:
        name: Linting
        runs-on: ubuntu-latest
        environment: development

        steps:
            - name: Setup
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2
              with:
                  node-version: '16'

            - name: Yarn Install
              run: yarn install

            - name: Lint Project
              run: yarn workspaces foreach -p run lint

    typechecking:
        name: Type Check
        runs-on: ubuntu-latest
        environment: development

        steps:
            - name: Setup
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2
              with:
                  node-version: '16'

            - name: Yarn Install
              run: yarn install

            - name: Prisma Generate
              run: yarn workspace @app/server generate

            - name: Type Check Project
              run: yarn workspaces foreach -p run typecheck

    testing:
        name: Testing
        runs-on: ubuntu-latest
        environment: development

        steps:
            - name: TODO
              run: echo TODO

    build-client:
        name: Build Client
        runs-on: ubuntu-latest
        environment: development
        needs: [linting, testing, typechecking]

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - uses: dorny/paths-filter@v2
              id: changes
              with:
                  filters: |
                      client:
                        - 'app/client/**'

            # Setup gcloud CLI
            - uses: google-github-actions/setup-gcloud@v0.2.0
              with:
                  service_account_key: ${{ secrets.GKE_SA_KEY }}
                  project_id: ${{ secrets.GKE_PROJECT_ID }}

            # Configure Docker to use the gcloud command-line tool as a credential
            # helper for authentication
            - run: |-
                  gcloud --quiet auth configure-docker
            # Get the GKE credentials so we can deploy to the cluster
            - uses: google-github-actions/get-gke-credentials@v0.2.1
              with:
                  cluster_name: ${{ env.GKE_CLUSTER }}
                  location: ${{ env.GKE_ZONE }}
                  credentials: ${{ secrets.GKE_SA_KEY }}

            # Build the Client
            - name: Build Client
              if: steps.changes.outputs.client == 'true'
              run: |-
                  docker build \
                    -f ./docker/Dockerfile.client \
                    --tag "gcr.io/$PROJECT_ID/$CLIENT_IMAGE:$GITHUB_SHA" \
                    --build-arg GITHUB_SHA="$GITHUB_SHA" \
                    --build-arg GITHUB_REF="$GITHUB_REF" \
                    --build-arg GRAPHQL_URL="$GRAPHQL_URL" \
                    --build-arg DEPLOYMENT_ENV="development" \
                    .

    build-server:
        name: Build Server
        runs-on: ubuntu-latest
        environment: development
        needs: [linting, testing, typechecking]

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - uses: dorny/paths-filter@v2
              id: changes
              with:
                  filters: |
                      server:
                        - 'app/server/**'

            # Setup gcloud CLI
            - uses: google-github-actions/setup-gcloud@v0.2.0
              with:
                  service_account_key: ${{ secrets.GKE_SA_KEY }}
                  project_id: ${{ secrets.GKE_PROJECT_ID }}

            # Configure Docker to use the gcloud command-line tool as a credential
            # helper for authentication
            - run: |-
                  gcloud --quiet auth configure-docker
            # Get the GKE credentials so we can deploy to the cluster
            - uses: google-github-actions/get-gke-credentials@v0.2.1
              with:
                  cluster_name: ${{ env.GKE_CLUSTER }}
                  location: ${{ env.GKE_ZONE }}
                  credentials: ${{ secrets.GKE_SA_KEY }}

            # Build the Server
            - name: Build Server
              if: steps.changes.outputs.server == 'true'
              run: |-
                  docker build \
                    -f ./docker/Dockerfile.server \
                    --tag "gcr.io/$PROJECT_ID/$SERVER_IMAGE:$GITHUB_SHA" \
                    --build-arg GITHUB_SHA="$GITHUB_SHA" \
                    --build-arg GITHUB_REF="$GITHUB_REF" \
                    .
