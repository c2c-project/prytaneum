type Organization implements Node {
    """
    Unique identifier for this org
    """
    id: ID!
    """
    name of the org
    """
    name: String!
    """
    When this org was created
    """
    createdAt: Date
    """
    all members of this org
    """
    members(first: Int, after: String): UserConnection
    """
    Events owned by this organization
    """
    events(first: Int, after: String): EventConnection

    """
    Whether or not the current viewer is a member
    """
    isViewerMember: Boolean
}

type OrganizationEdge {
    node: Organization!
    cursor: String!
}

type OrganizationConnection {
    edges: [OrganizationEdge!]
    pageInfo: PageInfo!
}

type OrganizationSubscription {
    orgId: ID!
    userId: ID
    deleteMember: Boolean!
}

"""
Necessary information for org creation
"""
input CreateOrganization {
    name: String!
}

"""
Information that may be updated by the user
"""
input UpdateOrganization {
    orgId: ID!
    name: String!
}

"""
Information necessary for deleting an org
"""
input DeleteOrganization {
    orgId: ID!
}

"""
Info necessary for adding a member to an organization
"""
input CreateMember {
    email: String!
    orgId: ID! 
}

input DeleteMember {
    userId: ID!
    orgId: ID!
}

type OrganizationMutationResponse implements MutationResponse{
    isError: Boolean!
    message: String!
    body: OrganizationEdge
}

type Mutation {
    createOrganization(input: CreateOrganization!): OrganizationMutationResponse!
    updateOrganization(input: UpdateOrganization!): OrganizationMutationResponse!
    deleteOrganization(input: DeleteOrganization!): OrganizationMutationResponse!

    """
    Adds a new member and returns the new user added
    """
    createMember(input: CreateMember!): UserMutationResponse!

    """
    Delete a member from the organization
    """
    deleteMember(input: DeleteMember!): UserMutationResponse!
}

type Subscription {
    """
    subscription for whenever a new org is added
    """
    orgUpdated: OrganizationSubscription!
}
