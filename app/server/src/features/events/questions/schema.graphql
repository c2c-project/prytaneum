type EventQuestion implements Node {
    id: ID!
    event: Event

    """
    The user id of the creator
    """
    createdById: ID

    """
    User information on the person asking the question
    """
    createdBy: User
    createdAt: Date

    refQuestion: EventQuestion

    """
    The actual content of the question
    """
    question: String
    position: String!
    isVisible: Boolean
    isAsked: Boolean
    lang: String
    isFollowUp: Boolean
    isQuote: Boolean

    """
    The users who have liked this question
    """
    likedBy: UserConnection

    """
    Find the count of the likes only
    """
    likedByCount: Int

    """
    Whether or not the current user likes the question
    """
    isLikedByViewer: Boolean

    """
    If the question is owned by the current viewer
    """
    isMyQuestion: Boolean
}

"""
EventQuestionQueue is the entire queue of the event
"""
type EventQuestionQueue {
    """
    last index is current question
    """
    questionRecord(first: Int, after: String): EventQuestionConnection
    enqueuedQuestions(first: Int, after: String): EventQuestionConnection
}

type EventQuestionEdge {
    node: EventQuestion!
    cursor: String!
}

type EventQuestionConnection {
    edges: [EventQuestionEdge!]
    pageInfo: PageInfo!
}

type Like {
    user: User!
    question: EventQuestion!
}

input CreateQuestion {
    question: String!
    isQuote: Boolean
    isFollowUp: Boolean
    refQuestion: ID
    eventId: ID!
}

input DeleteQuestion {
    questionId: ID!
    isVisible: Boolean!
}

input AlterLike {
    questionId: ID!
    """
    True if the user is attempting to like the question; false if they are trying to remove a like
    """
    to: Boolean!
}

type EventQuestionMutationResponse implements MutationResponse {
    isError: Boolean!
    message: String!
    body: EventQuestionEdge
}

type Mutation {
    createQuestion(input: CreateQuestion!): EventQuestionMutationResponse!
    deleteQuestion(input: DeleteQuestion!): EventQuestionMutationResponse!
    alterLike(input: AlterLike!): EventQuestionMutationResponse!
}

"""
Required to reduce frontend complexity due to relay limitation https://github.com/facebook/relay/issues/3457
"""
type EventQuestionEdgeContainer {
    edge: EventQuestionEdge!
}

type Subscription {
    """
    Question subscription for all operations performed on questions
    """
    questionCreated(eventId: ID!): EventQuestionEdgeContainer!
    questionUpdated(eventId: ID!): EventQuestionEdgeContainer!
    questionDeleted(eventId: ID!): EventQuestionEdgeContainer!

    questionAddedToRecord(eventId: ID!): EventQuestionEdgeContainer!
    questionRemovedFromRecord(eventId: ID!): EventQuestionEdgeContainer!

    # Do not need to control the order that things
    # are removed since we cannot control that on the frontend
    # We need to control the order that things are added since
    # we control that with append or prepend ont he frontend
    recordPushQuestion(eventId: ID!): EventQuestionEdgeContainer!
    recordUnshiftQuestion(eventId: ID!): EventQuestionEdgeContainer!
    recordRemoveQuestion(eventId: ID!): EventQuestionEdgeContainer!

    enqueuedPushQuestion(eventId: ID!): EventQuestionEdgeContainer!
    enqueuedUnshiftQuestion(eventId: ID!): EventQuestionEdgeContainer!
    enqueuedRemoveQuestion(eventId: ID!): EventQuestionEdgeContainer!

    questionAddedToEnqueued(eventId: ID!): EventQuestionEdgeContainer!
    questionRemovedFromEnqueued(eventId: ID!): EventQuestionEdgeContainer!
}

type Query {
    questionsByEventId(eventId: ID!): [EventQuestion!]
}
