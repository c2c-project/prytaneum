input CreateInvite {
    email: String!
    eventId: ID!
}

input ValidateInvite {
    token: String!
    eventId: ID!
}

type InviteMutationResponse implements MutationResponse {
    isError: Boolean!
    message: String!
    body: UserEdge
}

type ValidateInviteQueryResponse {
    valid: Boolean!
    user: User
}

type Query {
    """
    Validates an invite token and logs the user in if they are already registered.
    """
    validateInvite(input: ValidateInvite!): ValidateInviteQueryResponse!
}

type Mutation {
    createInvite(input: CreateInvite!): InviteMutationResponse!
    uninviteUser(eventId: ID!, userId: ID!): InviteMutationResponse!
}

type Subscription {
    """
    Subscribes to the creation of invites for a given event.
    """
    userInvited(eventId: ID!): UserEdgeContainer!
    """
    Subscribes to the removal of invites for a given event.
    """
    userUninvited(eventId: ID!): UserEdgeContainer!
}
